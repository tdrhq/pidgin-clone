#
# old_revision [08979461f8fd9f122c665f3ee192c20788dd1bca]
#
# add_file "libpurple/blistsaving.c"
#  content [bad281765af5a967831252ed8455d68f1ffef615]
# 
# add_file "libpurple/blistsaving.h"
#  content [1e9ad6bf7a255ed8d2111fc61944caa8aedc6ecc]
# 
# patch "libpurple/Makefile.am"
#  from [22dfd64715e47d7c86458cd3686d2c7857fce25f]
#    to [be1014b632e6314515ab53d482e2906833260098]
# 
# patch "libpurple/account.c"
#  from [f30d42673ff93f36740312dacb3ee1c876bf2936]
#    to [955dcdae8e3208724c11b848ed66f8144eea1bf5]
# 
# patch "libpurple/account.h"
#  from [9b08f5687265f22f391b0c71cb1631fd360b1681]
#    to [7da4ba14206cf1237f4df86e46afb0f9199c7463]
# 
# patch "libpurple/blist.c"
#  from [880a4f22c97e117941e6d36767fd82cf322c0c91]
#    to [0a2c52fee11835228b32c82a28b55b45883b52fd]
# 
# patch "libpurple/blist.h"
#  from [9580da3d4ae9096b2e4b8cbb88ca57a84f03f901]
#    to [963a9275946f159d188373d2444787bd7f7e00ed]
# 
# patch "libpurple/privacy.c"
#  from [5e9715a02d5433f53c7de47f703619bc84be82f5]
#    to [8afe566bde4b11a9b5426cf92aff781627c5e59c]
#
============================================================
--- libpurple/blistsaving.c	bad281765af5a967831252ed8455d68f1ffef615
+++ libpurple/blistsaving.c	bad281765af5a967831252ed8455d68f1ffef615
@@ -0,0 +1,580 @@
+/* purple
+ *
+ * Purple is the legal property of its developers, whose names are too numerous
+ * to list here.  Please refer to the COPYRIGHT file distributed with this
+ * source distribution.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ */
+ 
+#include "internal.h"
+#include "blistsaving.h"
+#include "blist.h"
+#include "util.h"
+#include "value.h"
+#include "xmlnode.h"
+#include "debug.h"
+
+static guint          save_timer = 0;
+static gboolean       blist_loaded = FALSE;
+ 
+/*********************************************************************
+ * Writing to disk                                                   *
+ *********************************************************************/
+
+static void
+value_to_xmlnode(gpointer key, gpointer hvalue, gpointer user_data)
+{
+	const char *name;
+	PurpleValue *value;
+	xmlnode *node, *child;
+	char buf[20];
+
+	name    = (const char *)key;
+	value   = (PurpleValue *)hvalue;
+	node    = (xmlnode *)user_data;
+
+	g_return_if_fail(value != NULL);
+
+	child = xmlnode_new_child(node, "setting");
+	xmlnode_set_attrib(child, "name", name);
+
+	if (purple_value_get_type(value) == PURPLE_TYPE_INT) {
+		xmlnode_set_attrib(child, "type", "int");
+		snprintf(buf, sizeof(buf), "%d", purple_value_get_int(value));
+		xmlnode_insert_data(child, buf, -1);
+	}
+	else if (purple_value_get_type(value) == PURPLE_TYPE_STRING) {
+		xmlnode_set_attrib(child, "type", "string");
+		xmlnode_insert_data(child, purple_value_get_string(value), -1);
+	}
+	else if (purple_value_get_type(value) == PURPLE_TYPE_BOOLEAN) {
+		xmlnode_set_attrib(child, "type", "bool");
+		snprintf(buf, sizeof(buf), "%d", purple_value_get_boolean(value));
+		xmlnode_insert_data(child, buf, -1);
+	}
+}
+
+static void
+chat_component_to_xmlnode(gpointer key, gpointer value, gpointer user_data)
+{
+	const char *name;
+	const char *data;
+	xmlnode *node, *child;
+
+	name = (const char *)key;
+	data = (const char *)value;
+	node = (xmlnode *)user_data;
+
+	g_return_if_fail(data != NULL);
+
+	child = xmlnode_new_child(node, "component");
+	xmlnode_set_attrib(child, "name", name);
+	xmlnode_insert_data(child, data, -1);
+}
+
+static xmlnode *
+buddy_to_xmlnode(PurpleBlistNode *bnode)
+{
+	xmlnode *node, *child;
+	PurpleBuddy *buddy;
+
+	buddy = (PurpleBuddy *)bnode;
+
+	node = xmlnode_new("buddy");
+	xmlnode_set_attrib(node, "account", purple_account_get_username(buddy->account));
+	xmlnode_set_attrib(node, "proto", purple_account_get_protocol_id(buddy->account));
+
+	child = xmlnode_new_child(node, "name");
+	xmlnode_insert_data(child, buddy->name, -1);
+
+	if (buddy->alias != NULL)
+	{
+		child = xmlnode_new_child(node, "alias");
+		xmlnode_insert_data(child, buddy->alias, -1);
+	}
+
+	/* Write buddy settings */
+	g_hash_table_foreach(buddy->node.settings, value_to_xmlnode, node);
+
+	return node;
+}
+
+static xmlnode *
+contact_to_xmlnode(PurpleBlistNode *cnode)
+{
+	xmlnode *node, *child;
+	PurpleContact *contact;
+	PurpleBlistNode *bnode;
+
+	contact = (PurpleContact *)cnode;
+
+	node = xmlnode_new("contact");
+
+	if (contact->alias != NULL)
+	{
+		xmlnode_set_attrib(node, "alias", contact->alias);
+	}
+
+	/* Write buddies */
+	for (bnode = cnode->child; bnode != NULL; bnode = bnode->next)
+	{
+		if (!PURPLE_BLIST_NODE_SHOULD_SAVE(bnode))
+			continue;
+		if (PURPLE_BLIST_NODE_IS_BUDDY(bnode))
+		{
+			child = buddy_to_xmlnode(bnode);
+			xmlnode_insert_child(node, child);
+		}
+	}
+
+	/* Write contact settings */
+	g_hash_table_foreach(cnode->settings, value_to_xmlnode, node);
+
+	return node;
+}
+
+static xmlnode *
+chat_to_xmlnode(PurpleBlistNode *cnode)
+{
+	xmlnode *node, *child;
+	PurpleChat *chat;
+
+	chat = (PurpleChat *)cnode;
+
+	node = xmlnode_new("chat");
+	xmlnode_set_attrib(node, "proto", purple_account_get_protocol_id(chat->account));
+	xmlnode_set_attrib(node, "account", purple_account_get_username(chat->account));
+
+	if (chat->alias != NULL)
+	{
+		child = xmlnode_new_child(node, "alias");
+		xmlnode_insert_data(child, chat->alias, -1);
+	}
+
+	/* Write chat components */
+	g_hash_table_foreach(chat->components, chat_component_to_xmlnode, node);
+
+	/* Write chat settings */
+	g_hash_table_foreach(chat->node.settings, value_to_xmlnode, node);
+
+	return node;
+}
+
+static xmlnode *
+group_to_xmlnode(PurpleBlistNode *gnode)
+{
+	xmlnode *node, *child;
+	PurpleGroup *group;
+	PurpleBlistNode *cnode;
+
+	group = (PurpleGroup *)gnode;
+
+	node = xmlnode_new("group");
+	xmlnode_set_attrib(node, "name", group->name);
+
+	/* Write settings */
+	g_hash_table_foreach(group->node.settings, value_to_xmlnode, node);
+
+	/* Write contacts and chats */
+	for (cnode = gnode->child; cnode != NULL; cnode = cnode->next)
+	{
+		if (!PURPLE_BLIST_NODE_SHOULD_SAVE(cnode))
+			continue;
+		if (PURPLE_BLIST_NODE_IS_CONTACT(cnode))
+		{
+			child = contact_to_xmlnode(cnode);
+			xmlnode_insert_child(node, child);
+		}
+		else if (PURPLE_BLIST_NODE_IS_CHAT(cnode))
+		{
+			child = chat_to_xmlnode(cnode);
+			xmlnode_insert_child(node, child);
+		}
+	}
+
+	return node;
+}
+
+static xmlnode *
+accountprivacy_to_xmlnode(PurpleAccount *account)
+{
+	xmlnode *node, *child;
+	GSList *cur;
+	char buf[10];
+
+	node = xmlnode_new("account");
+	xmlnode_set_attrib(node, "proto", purple_account_get_protocol_id(account));
+	xmlnode_set_attrib(node, "name", purple_account_get_username(account));
+	snprintf(buf, sizeof(buf), "%d", account->perm_deny);
+	xmlnode_set_attrib(node, "mode", buf);
+
+	for (cur = account->permit; cur; cur = cur->next)
+	{
+		child = xmlnode_new_child(node, "permit");
+		xmlnode_insert_data(child, cur->data, -1);
+	}
+
+	for (cur = account->deny; cur; cur = cur->next)
+	{
+		child = xmlnode_new_child(node, "block");
+		xmlnode_insert_data(child, cur->data, -1);
+	}
+
+	return node;
+}
+
+static xmlnode *
+blist_to_xmlnode(PurpleBuddyList *blist)
+{
+	xmlnode *node, *child, *grandchild;
+	PurpleBlistNode *gnode;
+	GList *cur;
+
+	node = xmlnode_new("purple");
+	xmlnode_set_attrib(node, "version", "1.0");
+
+	/* Write groups */
+	child = xmlnode_new_child(node, "blist");
+	for (gnode = blist->root; gnode != NULL; gnode = gnode->next)
+	{
+		if (!PURPLE_BLIST_NODE_SHOULD_SAVE(gnode))
+			continue;
+		if (PURPLE_BLIST_NODE_IS_GROUP(gnode))
+		{
+			grandchild = group_to_xmlnode(gnode);
+			xmlnode_insert_child(child, grandchild);
+		}
+	}
+
+	/* Write privacy settings */
+	child = xmlnode_new_child(node, "privacy");
+	for (cur = purple_accounts_get_all(); cur != NULL; cur = cur->next)
+	{
+		grandchild = accountprivacy_to_xmlnode(cur->data);
+		xmlnode_insert_child(child, grandchild);
+	}
+
+	return node;
+}
+
+static void
+purple_blist_sync(PurpleBuddyList *blist)
+{
+	xmlnode *node;
+	char *data;
+
+	if (!blist_loaded)
+	{
+		purple_debug_error("blist", "Attempted to save buddy list before it "
+						 "was read!\n");
+		return;
+	}
+
+	node = blist_to_xmlnode(blist);
+	data = xmlnode_to_formatted_str(node, NULL);
+	purple_util_write_data_to_file("blist.xml", data, -1);
+	g_free(data);
+	xmlnode_free(node);
+}
+
+static gboolean
+save_cb(PurpleBuddyList *blist)
+{
+	purple_blist_sync(blist);
+	save_timer = 0;
+	return FALSE;
+}
+
+
+/*********************************************************************
+ * Reading from disk                                                 *
+ *********************************************************************/
+
+static PurpleBlistNode *purple_blist_get_last_sibling(PurpleBlistNode *node)
+{
+	PurpleBlistNode *n = node;
+	if (!n)
+		return NULL;
+	while (n->next)
+		n = n->next;
+	return n;
+}
+
+static PurpleBlistNode *purple_blist_get_last_child(PurpleBlistNode *node)
+{
+	if (!node)
+		return NULL;
+	return purple_blist_get_last_sibling(node->child);
+}
+
+static void
+parse_setting(PurpleBlistNode *node, xmlnode *setting)
+{
+	const char *name = xmlnode_get_attrib(setting, "name");
+	const char *type = xmlnode_get_attrib(setting, "type");
+	char *value = xmlnode_get_data(setting);
+
+	if (!value)
+		return;
+
+	if (!type || purple_strequal(type, "string"))
+		purple_blist_node_set_string(node, name, value);
+	else if (purple_strequal(type, "bool"))
+		purple_blist_node_set_bool(node, name, atoi(value));
+	else if (purple_strequal(type, "int"))
+		purple_blist_node_set_int(node, name, atoi(value));
+
+	g_free(value);
+}
+
+static void
+parse_buddy(PurpleGroup *group, PurpleContact *contact, xmlnode *bnode)
+{
+	PurpleAccount *account;
+	PurpleBuddy *buddy;
+	char *name = NULL, *alias = NULL;
+	const char *acct_name, *proto, *protocol;
+	xmlnode *x;
+
+	acct_name = xmlnode_get_attrib(bnode, "account");
+	protocol = xmlnode_get_attrib(bnode, "protocol");
+	protocol = _purple_oscar_convert(acct_name, protocol); /* XXX: Remove */
+	proto = xmlnode_get_attrib(bnode, "proto");
+	proto = _purple_oscar_convert(acct_name, proto); /* XXX: Remove */
+
+	if (!acct_name || (!proto && !protocol))
+		return;
+
+	account = purple_accounts_find(acct_name, proto ? proto : protocol);
+
+	if (!account)
+		return;
+
+	if ((x = xmlnode_get_child(bnode, "name")))
+		name = xmlnode_get_data(x);
+
+	if (!name)
+		return;
+
+	if ((x = xmlnode_get_child(bnode, "alias")))
+		alias = xmlnode_get_data(x);
+
+	buddy = purple_buddy_new(account, name, alias);
+	purple_blist_add_buddy(buddy, contact, group,
+			purple_blist_get_last_child((PurpleBlistNode*)contact));
+
+	for (x = xmlnode_get_child(bnode, "setting"); x; x = xmlnode_get_next_twin(x)) {
+		parse_setting((PurpleBlistNode*)buddy, x);
+	}
+
+	g_free(name);
+	g_free(alias);
+}
+
+static void
+parse_contact(PurpleGroup *group, xmlnode *cnode)
+{
+	PurpleContact *contact = purple_contact_new();
+	xmlnode *x;
+	const char *alias;
+
+	purple_blist_add_contact(contact, group,
+			purple_blist_get_last_child((PurpleBlistNode*)group));
+
+	if ((alias = xmlnode_get_attrib(cnode, "alias"))) {
+		purple_blist_alias_contact(contact, alias);
+	}
+
+	for (x = cnode->child; x; x = x->next) {
+		if (x->type != XMLNODE_TYPE_TAG)
+			continue;
+		if (purple_strequal(x->name, "buddy"))
+			parse_buddy(group, contact, x);
+		else if (purple_strequal(x->name, "setting"))
+			parse_setting((PurpleBlistNode*)contact, x);
+	}
+
+	/* if the contact is empty, don't keep it around.  it causes problems */
+	if (!((PurpleBlistNode*)contact)->child)
+		purple_blist_remove_contact(contact);
+}
+
+static void
+parse_chat(PurpleGroup *group, xmlnode *cnode)
+{
+	PurpleChat *chat;
+	PurpleAccount *account;
+	const char *acct_name, *proto, *protocol;
+	xmlnode *x;
+	char *alias = NULL;
+	GHashTable *components;
+
+	acct_name = xmlnode_get_attrib(cnode, "account");
+	protocol = xmlnode_get_attrib(cnode, "protocol");
+	proto = xmlnode_get_attrib(cnode, "proto");
+
+	if (!acct_name || (!proto && !protocol))
+		return;
+
+	account = purple_accounts_find(acct_name, proto ? proto : protocol);
+
+	if (!account)
+		return;
+
+	if ((x = xmlnode_get_child(cnode, "alias")))
+		alias = xmlnode_get_data(x);
+
+	components = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
+
+	for (x = xmlnode_get_child(cnode, "component"); x; x = xmlnode_get_next_twin(x)) {
+		const char *name;
+		char *value;
+
+		name = xmlnode_get_attrib(x, "name");
+		value = xmlnode_get_data(x);
+		g_hash_table_replace(components, g_strdup(name), value);
+	}
+
+	chat = purple_chat_new(account, alias, components);
+	purple_blist_add_chat(chat, group,
+			purple_blist_get_last_child((PurpleBlistNode*)group));
+
+	for (x = xmlnode_get_child(cnode, "setting"); x; x = xmlnode_get_next_twin(x)) {
+		parse_setting((PurpleBlistNode*)chat, x);
+	}
+
+	g_free(alias);
+}
+
+static void
+parse_group(xmlnode *groupnode)
+{
+	const char *name = xmlnode_get_attrib(groupnode, "name");
+	PurpleBuddyList *purplebuddylist  = purple_get_blist();
+	PurpleGroup *group;
+	xmlnode *cnode;
+
+	if (!name)
+		name = _("Buddies");
+
+	group = purple_group_new(name);
+	purple_blist_add_group(group,
+			purple_blist_get_last_sibling(purplebuddylist->root));
+
+	for (cnode = groupnode->child; cnode; cnode = cnode->next) {
+		if (cnode->type != XMLNODE_TYPE_TAG)
+			continue;
+		if (purple_strequal(cnode->name, "setting"))
+			parse_setting((PurpleBlistNode*)group, cnode);
+		else if (purple_strequal(cnode->name, "contact") ||
+				purple_strequal(cnode->name, "person"))
+			parse_contact(group, cnode);
+		else if (purple_strequal(cnode->name, "chat"))
+			parse_chat(group, cnode);
+	}
+}
+
+
+void
+purple_blist_load_from_file()
+{
+	xmlnode *purple, *blist, *privacy;
+
+	blist_loaded = TRUE;
+
+	purple = purple_util_read_xml_from_file("blist.xml", _("buddy list"));
+
+	if (purple == NULL)
+		return;
+
+	blist = xmlnode_get_child(purple, "blist");
+	if (blist) {
+		xmlnode *groupnode;
+		for (groupnode = xmlnode_get_child(blist, "group"); groupnode != NULL;
+				groupnode = xmlnode_get_next_twin(groupnode)) {
+			parse_group(groupnode);
+		}
+	}
+
+	privacy = xmlnode_get_child(purple, "privacy");
+	if (privacy) {
+		xmlnode *anode;
+		for (anode = privacy->child; anode; anode = anode->next) {
+			xmlnode *x;
+			PurpleAccount *account;
+			int imode;
+			const char *acct_name, *proto, *mode, *protocol;
+
+			acct_name = xmlnode_get_attrib(anode, "name");
+			protocol = xmlnode_get_attrib(anode, "protocol");
+			proto = xmlnode_get_attrib(anode, "proto");
+			mode = xmlnode_get_attrib(anode, "mode");
+
+			if (!acct_name || (!proto && !protocol) || !mode)
+				continue;
+
+			account = purple_accounts_find(acct_name, proto ? proto : protocol);
+
+			if (!account)
+				continue;
+
+			imode = atoi(mode);
+			account->perm_deny = (imode != 0 ? imode : PURPLE_PRIVACY_ALLOW_ALL);
+
+			for (x = anode->child; x; x = x->next) {
+				char *name;
+				if (x->type != XMLNODE_TYPE_TAG)
+					continue;
+
+				if (purple_strequal(x->name, "permit")) {
+					name = xmlnode_get_data(x);
+					purple_privacy_permit_add(account, name, TRUE);
+					g_free(name);
+				} else if (purple_strequal(x->name, "block")) {
+					name = xmlnode_get_data(x);
+					purple_privacy_deny_add(account, name, TRUE);
+					g_free(name);
+				}
+			}
+		}
+	}
+
+	xmlnode_free(purple);
+
+	/* This tells the buddy icon code to do its thing. */
+	_purple_buddy_icons_blist_loaded_cb();
+}
+
+void
+purple_blist_schedule_save_callback()
+{
+	PurpleBuddyList *blist = purple_get_blist();
+	if (save_timer == 0 && blist)
+		save_timer = purple_timeout_add_seconds(5, (GSourceFunc) save_cb, blist);
+}
+
+void
+purple_blist_save_callback(PurpleBuddyList *blist, PurpleBlistNode *node) {
+	purple_blist_schedule_save();
+}
+
+void
+purple_blist_save_account_callback(PurpleAccount *account)
+{
+	purple_blist_schedule_save();
+}
+
+
============================================================
--- libpurple/blistsaving.h	1e9ad6bf7a255ed8d2111fc61944caa8aedc6ecc
+++ libpurple/blistsaving.h	1e9ad6bf7a255ed8d2111fc61944caa8aedc6ecc
@@ -0,0 +1,49 @@
+/**
+ * @file blistsaving.h Buddy List Saving API
+ * @ingroup core
+ */
+
+/* purple
+ *
+ * Purple is the legal property of its developers, whose names are too numerous
+ * to list here.  Please refer to the COPYRIGHT file distributed with this
+ * source distribution.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ */
+#ifndef _PURPLE_BLISTSAVING_H_
+#define _PURPLE_BLISTSAVING_H_
+
+#include <glib.h>
+
+/**
+ * Loads the buddy list from ~/.purple/blist.xml.
+ */
+void purple_blist_load_from_file(void);
+
+/**
+ * Schedule a save of the blist.xml file.  This is used by the privacy
+ * API whenever the privacy settings are changed.  If you make a change
+ * to blist.xml using one of the functions in the buddy list API, then
+ * the buddy list is saved automatically, so you should not need to
+ * call this.
+ */
+void purple_blist_schedule_save_callback(void);
+
+void purple_blist_save_callback(PurpleBuddyList *blist, PurpleBlistNode *node);
+
+void purple_blist_save_account_callback(PurpleAccount *account);
+
+#endif
============================================================
--- libpurple/Makefile.am	22dfd64715e47d7c86458cd3686d2c7857fce25f
+++ libpurple/Makefile.am	be1014b632e6314515ab53d482e2906833260098
@@ -90,7 +90,8 @@ purple_coresources = \
 	value.c \
 	version.c \
 	xmlnode.c \
-	whiteboard.c
+	whiteboard.c \
+	blistsaving.c
 
 purple_coreheaders = \
 	account.h \
@@ -150,7 +151,8 @@ purple_coreheaders = \
 	util.h \
 	value.h \
 	xmlnode.h \
-	whiteboard.h
+	whiteboard.h \
+	blistsaving.h
 
 purple_builtheaders = purple.h version.h marshallers.h
 
============================================================
--- libpurple/account.c	f30d42673ff93f36740312dacb3ee1c876bf2936
+++ libpurple/account.c	955dcdae8e3208724c11b848ed66f8144eea1bf5
@@ -40,6 +40,7 @@
 #include "status.h"
 #include "util.h"
 #include "xmlnode.h"
+#include "blistsaving.h"
 
 typedef struct
 {
@@ -2679,6 +2680,9 @@ purple_accounts_set_ui_ops(PurpleAccount
 purple_accounts_set_ui_ops(PurpleAccountUiOps *ops)
 {
 	account_ui_ops = ops;
+
+	if (!ops->save_account)
+		ops->save_account = purple_blist_save_account_callback;
 }
 
 PurpleAccountUiOps *
============================================================
--- libpurple/account.h	9b08f5687265f22f391b0c71cb1631fd360b1681
+++ libpurple/account.h	7da4ba14206cf1237f4df86e46afb0f9199c7463
@@ -101,7 +101,8 @@ struct _PurpleAccountUiOps
 	 */
 	void (*close_account_request)(void *ui_handle);
 
-	void (*_purple_reserved1)(void);
+	void (*save_account)(PurpleAccount *account);
+
 	void (*_purple_reserved2)(void);
 	void (*_purple_reserved3)(void);
 	void (*_purple_reserved4)(void);
============================================================
--- libpurple/blist.c	880a4f22c97e117941e6d36767fd82cf322c0c91
+++ libpurple/blist.c	0a2c52fee11835228b32c82a28b55b45883b52fd
@@ -36,6 +36,7 @@
 #include "util.h"
 #include "value.h"
 #include "xmlnode.h"
+#include "blistsaving.h"
 
 static PurpleBlistUiOps *blist_ui_ops = NULL;
 
@@ -48,8 +49,7 @@ static GHashTable *buddies_cache = NULL;
  */
 static GHashTable *buddies_cache = NULL;
 
-static guint          save_timer = 0;
-static gboolean       blist_loaded = FALSE;
+// static gboolean       blist_loaded = FALSE;
 
 /*********************************************************************
  * Private utility functions                                         *
@@ -114,526 +114,7 @@ purple_blist_buddies_cache_remove_accoun
 	g_hash_table_remove(buddies_cache, account);
 }
 
-
 /*********************************************************************
- * Writing to disk                                                   *
- *********************************************************************/
-
-static void
-value_to_xmlnode(gpointer key, gpointer hvalue, gpointer user_data)
-{
-	const char *name;
-	PurpleValue *value;
-	xmlnode *node, *child;
-	char buf[21];
-
-	name    = (const char *)key;
-	value   = (PurpleValue *)hvalue;
-	node    = (xmlnode *)user_data;
-
-	g_return_if_fail(value != NULL);
-
-	child = xmlnode_new_child(node, "setting");
-	xmlnode_set_attrib(child, "name", name);
-
-	if (purple_value_get_type(value) == PURPLE_TYPE_INT) {
-		xmlnode_set_attrib(child, "type", "int");
-		g_snprintf(buf, sizeof(buf), "%d", purple_value_get_int(value));
-		xmlnode_insert_data(child, buf, -1);
-	}
-	else if (purple_value_get_type(value) == PURPLE_TYPE_STRING) {
-		xmlnode_set_attrib(child, "type", "string");
-		xmlnode_insert_data(child, purple_value_get_string(value), -1);
-	}
-	else if (purple_value_get_type(value) == PURPLE_TYPE_BOOLEAN) {
-		xmlnode_set_attrib(child, "type", "bool");
-		g_snprintf(buf, sizeof(buf), "%d", purple_value_get_boolean(value));
-		xmlnode_insert_data(child, buf, -1);
-	}
-}
-
-static void
-chat_component_to_xmlnode(gpointer key, gpointer value, gpointer user_data)
-{
-	const char *name;
-	const char *data;
-	xmlnode *node, *child;
-
-	name = (const char *)key;
-	data = (const char *)value;
-	node = (xmlnode *)user_data;
-
-	g_return_if_fail(data != NULL);
-
-	child = xmlnode_new_child(node, "component");
-	xmlnode_set_attrib(child, "name", name);
-	xmlnode_insert_data(child, data, -1);
-}
-
-static xmlnode *
-buddy_to_xmlnode(PurpleBlistNode *bnode)
-{
-	xmlnode *node, *child;
-	PurpleBuddy *buddy;
-
-	buddy = (PurpleBuddy *)bnode;
-
-	node = xmlnode_new("buddy");
-	xmlnode_set_attrib(node, "account", purple_account_get_username(buddy->account));
-	xmlnode_set_attrib(node, "proto", purple_account_get_protocol_id(buddy->account));
-
-	child = xmlnode_new_child(node, "name");
-	xmlnode_insert_data(child, buddy->name, -1);
-
-	if (buddy->alias != NULL)
-	{
-		child = xmlnode_new_child(node, "alias");
-		xmlnode_insert_data(child, buddy->alias, -1);
-	}
-
-	/* Write buddy settings */
-	g_hash_table_foreach(buddy->node.settings, value_to_xmlnode, node);
-
-	return node;
-}
-
-static xmlnode *
-contact_to_xmlnode(PurpleBlistNode *cnode)
-{
-	xmlnode *node, *child;
-	PurpleContact *contact;
-	PurpleBlistNode *bnode;
-
-	contact = (PurpleContact *)cnode;
-
-	node = xmlnode_new("contact");
-
-	if (contact->alias != NULL)
-	{
-		xmlnode_set_attrib(node, "alias", contact->alias);
-	}
-
-	/* Write buddies */
-	for (bnode = cnode->child; bnode != NULL; bnode = bnode->next)
-	{
-		if (!PURPLE_BLIST_NODE_SHOULD_SAVE(bnode))
-			continue;
-		if (PURPLE_BLIST_NODE_IS_BUDDY(bnode))
-		{
-			child = buddy_to_xmlnode(bnode);
-			xmlnode_insert_child(node, child);
-		}
-	}
-
-	/* Write contact settings */
-	g_hash_table_foreach(cnode->settings, value_to_xmlnode, node);
-
-	return node;
-}
-
-static xmlnode *
-chat_to_xmlnode(PurpleBlistNode *cnode)
-{
-	xmlnode *node, *child;
-	PurpleChat *chat;
-
-	chat = (PurpleChat *)cnode;
-
-	node = xmlnode_new("chat");
-	xmlnode_set_attrib(node, "proto", purple_account_get_protocol_id(chat->account));
-	xmlnode_set_attrib(node, "account", purple_account_get_username(chat->account));
-
-	if (chat->alias != NULL)
-	{
-		child = xmlnode_new_child(node, "alias");
-		xmlnode_insert_data(child, chat->alias, -1);
-	}
-
-	/* Write chat components */
-	g_hash_table_foreach(chat->components, chat_component_to_xmlnode, node);
-
-	/* Write chat settings */
-	g_hash_table_foreach(chat->node.settings, value_to_xmlnode, node);
-
-	return node;
-}
-
-static xmlnode *
-group_to_xmlnode(PurpleBlistNode *gnode)
-{
-	xmlnode *node, *child;
-	PurpleGroup *group;
-	PurpleBlistNode *cnode;
-
-	group = (PurpleGroup *)gnode;
-
-	node = xmlnode_new("group");
-	xmlnode_set_attrib(node, "name", group->name);
-
-	/* Write settings */
-	g_hash_table_foreach(group->node.settings, value_to_xmlnode, node);
-
-	/* Write contacts and chats */
-	for (cnode = gnode->child; cnode != NULL; cnode = cnode->next)
-	{
-		if (!PURPLE_BLIST_NODE_SHOULD_SAVE(cnode))
-			continue;
-		if (PURPLE_BLIST_NODE_IS_CONTACT(cnode))
-		{
-			child = contact_to_xmlnode(cnode);
-			xmlnode_insert_child(node, child);
-		}
-		else if (PURPLE_BLIST_NODE_IS_CHAT(cnode))
-		{
-			child = chat_to_xmlnode(cnode);
-			xmlnode_insert_child(node, child);
-		}
-	}
-
-	return node;
-}
-
-static xmlnode *
-accountprivacy_to_xmlnode(PurpleAccount *account)
-{
-	xmlnode *node, *child;
-	GSList *cur;
-	char buf[10];
-
-	node = xmlnode_new("account");
-	xmlnode_set_attrib(node, "proto", purple_account_get_protocol_id(account));
-	xmlnode_set_attrib(node, "name", purple_account_get_username(account));
-	g_snprintf(buf, sizeof(buf), "%d", account->perm_deny);
-	xmlnode_set_attrib(node, "mode", buf);
-
-	for (cur = account->permit; cur; cur = cur->next)
-	{
-		child = xmlnode_new_child(node, "permit");
-		xmlnode_insert_data(child, cur->data, -1);
-	}
-
-	for (cur = account->deny; cur; cur = cur->next)
-	{
-		child = xmlnode_new_child(node, "block");
-		xmlnode_insert_data(child, cur->data, -1);
-	}
-
-	return node;
-}
-
-static xmlnode *
-blist_to_xmlnode(void)
-{
-	xmlnode *node, *child, *grandchild;
-	PurpleBlistNode *gnode;
-	GList *cur;
-
-	node = xmlnode_new("purple");
-	xmlnode_set_attrib(node, "version", "1.0");
-
-	/* Write groups */
-	child = xmlnode_new_child(node, "blist");
-	for (gnode = purplebuddylist->root; gnode != NULL; gnode = gnode->next)
-	{
-		if (!PURPLE_BLIST_NODE_SHOULD_SAVE(gnode))
-			continue;
-		if (PURPLE_BLIST_NODE_IS_GROUP(gnode))
-		{
-			grandchild = group_to_xmlnode(gnode);
-			xmlnode_insert_child(child, grandchild);
-		}
-	}
-
-	/* Write privacy settings */
-	child = xmlnode_new_child(node, "privacy");
-	for (cur = purple_accounts_get_all(); cur != NULL; cur = cur->next)
-	{
-		grandchild = accountprivacy_to_xmlnode(cur->data);
-		xmlnode_insert_child(child, grandchild);
-	}
-
-	return node;
-}
-
-static void
-purple_blist_sync(void)
-{
-	xmlnode *node;
-	char *data;
-
-	if (!blist_loaded)
-	{
-		purple_debug_error("blist", "Attempted to save buddy list before it "
-						 "was read!\n");
-		return;
-	}
-
-	node = blist_to_xmlnode();
-	data = xmlnode_to_formatted_str(node, NULL);
-	purple_util_write_data_to_file("blist.xml", data, -1);
-	g_free(data);
-	xmlnode_free(node);
-}
-
-static gboolean
-save_cb(gpointer data)
-{
-	purple_blist_sync();
-	save_timer = 0;
-	return FALSE;
-}
-
-void
-purple_blist_schedule_save()
-{
-	if (save_timer == 0)
-		save_timer = purple_timeout_add_seconds(5, save_cb, NULL);
-}
-
-
-/*********************************************************************
- * Reading from disk                                                 *
- *********************************************************************/
-
-static void
-parse_setting(PurpleBlistNode *node, xmlnode *setting)
-{
-	const char *name = xmlnode_get_attrib(setting, "name");
-	const char *type = xmlnode_get_attrib(setting, "type");
-	char *value = xmlnode_get_data(setting);
-
-	if (!value)
-		return;
-
-	if (!type || purple_strequal(type, "string"))
-		purple_blist_node_set_string(node, name, value);
-	else if (purple_strequal(type, "bool"))
-		purple_blist_node_set_bool(node, name, atoi(value));
-	else if (purple_strequal(type, "int"))
-		purple_blist_node_set_int(node, name, atoi(value));
-
-	g_free(value);
-}
-
-static void
-parse_buddy(PurpleGroup *group, PurpleContact *contact, xmlnode *bnode)
-{
-	PurpleAccount *account;
-	PurpleBuddy *buddy;
-	char *name = NULL, *alias = NULL;
-	const char *acct_name, *proto, *protocol;
-	xmlnode *x;
-
-	acct_name = xmlnode_get_attrib(bnode, "account");
-	protocol = xmlnode_get_attrib(bnode, "protocol");
-	protocol = _purple_oscar_convert(acct_name, protocol); /* XXX: Remove */
-	proto = xmlnode_get_attrib(bnode, "proto");
-	proto = _purple_oscar_convert(acct_name, proto); /* XXX: Remove */
-
-	if (!acct_name || (!proto && !protocol))
-		return;
-
-	account = purple_accounts_find(acct_name, proto ? proto : protocol);
-
-	if (!account)
-		return;
-
-	if ((x = xmlnode_get_child(bnode, "name")))
-		name = xmlnode_get_data(x);
-
-	if (!name)
-		return;
-
-	if ((x = xmlnode_get_child(bnode, "alias")))
-		alias = xmlnode_get_data(x);
-
-	buddy = purple_buddy_new(account, name, alias);
-	purple_blist_add_buddy(buddy, contact, group,
-			purple_blist_get_last_child((PurpleBlistNode*)contact));
-
-	for (x = xmlnode_get_child(bnode, "setting"); x; x = xmlnode_get_next_twin(x)) {
-		parse_setting((PurpleBlistNode*)buddy, x);
-	}
-
-	g_free(name);
-	g_free(alias);
-}
-
-static void
-parse_contact(PurpleGroup *group, xmlnode *cnode)
-{
-	PurpleContact *contact = purple_contact_new();
-	xmlnode *x;
-	const char *alias;
-
-	purple_blist_add_contact(contact, group,
-			purple_blist_get_last_child((PurpleBlistNode*)group));
-
-	if ((alias = xmlnode_get_attrib(cnode, "alias"))) {
-		purple_blist_alias_contact(contact, alias);
-	}
-
-	for (x = cnode->child; x; x = x->next) {
-		if (x->type != XMLNODE_TYPE_TAG)
-			continue;
-		if (purple_strequal(x->name, "buddy"))
-			parse_buddy(group, contact, x);
-		else if (purple_strequal(x->name, "setting"))
-			parse_setting((PurpleBlistNode*)contact, x);
-	}
-
-	/* if the contact is empty, don't keep it around.  it causes problems */
-	if (!((PurpleBlistNode*)contact)->child)
-		purple_blist_remove_contact(contact);
-}
-
-static void
-parse_chat(PurpleGroup *group, xmlnode *cnode)
-{
-	PurpleChat *chat;
-	PurpleAccount *account;
-	const char *acct_name, *proto, *protocol;
-	xmlnode *x;
-	char *alias = NULL;
-	GHashTable *components;
-
-	acct_name = xmlnode_get_attrib(cnode, "account");
-	protocol = xmlnode_get_attrib(cnode, "protocol");
-	proto = xmlnode_get_attrib(cnode, "proto");
-
-	if (!acct_name || (!proto && !protocol))
-		return;
-
-	account = purple_accounts_find(acct_name, proto ? proto : protocol);
-
-	if (!account)
-		return;
-
-	if ((x = xmlnode_get_child(cnode, "alias")))
-		alias = xmlnode_get_data(x);
-
-	components = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
-
-	for (x = xmlnode_get_child(cnode, "component"); x; x = xmlnode_get_next_twin(x)) {
-		const char *name;
-		char *value;
-
-		name = xmlnode_get_attrib(x, "name");
-		value = xmlnode_get_data(x);
-		g_hash_table_replace(components, g_strdup(name), value);
-	}
-
-	chat = purple_chat_new(account, alias, components);
-	purple_blist_add_chat(chat, group,
-			purple_blist_get_last_child((PurpleBlistNode*)group));
-
-	for (x = xmlnode_get_child(cnode, "setting"); x; x = xmlnode_get_next_twin(x)) {
-		parse_setting((PurpleBlistNode*)chat, x);
-	}
-
-	g_free(alias);
-}
-
-static void
-parse_group(xmlnode *groupnode)
-{
-	const char *name = xmlnode_get_attrib(groupnode, "name");
-	PurpleGroup *group;
-	xmlnode *cnode;
-
-	if (!name)
-		name = _("Buddies");
-
-	group = purple_group_new(name);
-	purple_blist_add_group(group,
-			purple_blist_get_last_sibling(purplebuddylist->root));
-
-	for (cnode = groupnode->child; cnode; cnode = cnode->next) {
-		if (cnode->type != XMLNODE_TYPE_TAG)
-			continue;
-		if (purple_strequal(cnode->name, "setting"))
-			parse_setting((PurpleBlistNode*)group, cnode);
-		else if (purple_strequal(cnode->name, "contact") ||
-				purple_strequal(cnode->name, "person"))
-			parse_contact(group, cnode);
-		else if (purple_strequal(cnode->name, "chat"))
-			parse_chat(group, cnode);
-	}
-}
-
-/* TODO: Make static and rename to load_blist */
-void
-purple_blist_load()
-{
-	xmlnode *purple, *blist, *privacy;
-
-	blist_loaded = TRUE;
-
-	purple = purple_util_read_xml_from_file("blist.xml", _("buddy list"));
-
-	if (purple == NULL)
-		return;
-
-	blist = xmlnode_get_child(purple, "blist");
-	if (blist) {
-		xmlnode *groupnode;
-		for (groupnode = xmlnode_get_child(blist, "group"); groupnode != NULL;
-				groupnode = xmlnode_get_next_twin(groupnode)) {
-			parse_group(groupnode);
-		}
-	}
-
-	privacy = xmlnode_get_child(purple, "privacy");
-	if (privacy) {
-		xmlnode *anode;
-		for (anode = privacy->child; anode; anode = anode->next) {
-			xmlnode *x;
-			PurpleAccount *account;
-			int imode;
-			const char *acct_name, *proto, *mode, *protocol;
-
-			acct_name = xmlnode_get_attrib(anode, "name");
-			protocol = xmlnode_get_attrib(anode, "protocol");
-			proto = xmlnode_get_attrib(anode, "proto");
-			mode = xmlnode_get_attrib(anode, "mode");
-
-			if (!acct_name || (!proto && !protocol) || !mode)
-				continue;
-
-			account = purple_accounts_find(acct_name, proto ? proto : protocol);
-
-			if (!account)
-				continue;
-
-			imode = atoi(mode);
-			account->perm_deny = (imode != 0 ? imode : PURPLE_PRIVACY_ALLOW_ALL);
-
-			for (x = anode->child; x; x = x->next) {
-				char *name;
-				if (x->type != XMLNODE_TYPE_TAG)
-					continue;
-
-				if (purple_strequal(x->name, "permit")) {
-					name = xmlnode_get_data(x);
-					purple_privacy_permit_add(account, name, TRUE);
-					g_free(name);
-				} else if (purple_strequal(x->name, "block")) {
-					name = xmlnode_get_data(x);
-					purple_privacy_deny_add(account, name, TRUE);
-					g_free(name);
-				}
-			}
-		}
-	}
-
-	xmlnode_free(purple);
-
-	/* This tells the buddy icon code to do its thing. */
-	_purple_buddy_icons_blist_loaded_cb();
-}
-
-
-/*********************************************************************
  * Stuff                                                             *
  *********************************************************************/
 
@@ -714,6 +195,17 @@ void
 }
 
 void
+purple_blist_load(void)
+{
+	purple_blist_load_from_file();
+}
+
+void purple_blist_schedule_save(void)
+{
+	purple_blist_schedule_save_callback();
+}
+
+void
 purple_set_blist(PurpleBuddyList *list)
 {
 	purplebuddylist = list;
@@ -958,7 +450,8 @@ void purple_blist_rename_buddy(PurpleBud
 	g_free(buddy->name);
 	buddy->name = g_strdup(name);
 
-	purple_blist_schedule_save();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) buddy);
 
 	if (ops && ops->update)
 		ops->update(purplebuddylist, (PurpleBlistNode *)buddy);
@@ -998,7 +491,8 @@ void purple_blist_alias_contact(PurpleCo
 		g_free(new_alias); /* could be "\0" */
 	}
 
-	purple_blist_schedule_save();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) contact);
 
 	if (ops && ops->update)
 		ops->update(purplebuddylist, (PurpleBlistNode *)contact);
@@ -1043,7 +537,8 @@ void purple_blist_alias_chat(PurpleChat 
 		g_free(new_alias); /* could be "\0" */
 	}
 
-	purple_blist_schedule_save();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) chat);
 
 	if (ops && ops->update)
 		ops->update(purplebuddylist, (PurpleBlistNode *)chat);
@@ -1079,7 +574,8 @@ void purple_blist_alias_buddy(PurpleBudd
 		g_free(new_alias); /* could be "\0" */
 	}
 
-	purple_blist_schedule_save();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) buddy);
 
 	if (ops && ops->update)
 		ops->update(purplebuddylist, (PurpleBlistNode *)buddy);
@@ -1120,7 +616,8 @@ void purple_blist_server_alias_buddy(Pur
 		g_free(new_alias); /* could be "\0"; */
 	}
 
-	purple_blist_schedule_save();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) buddy);
 
 	if (ops && ops->update)
 		ops->update(purplebuddylist, (PurpleBlistNode *)buddy);
@@ -1214,7 +711,8 @@ void purple_blist_rename_group(PurpleGro
 	}
 
 	/* Save our changes */
-	purple_blist_schedule_save();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) source);
 
 	/* Update the UI */
 	if (ops && ops->update)
@@ -1473,7 +971,8 @@ void purple_blist_add_chat(PurpleChat *c
 		if (ops && ops->new_node)
 			ops->new_node(cnode);
 
-		purple_blist_schedule_save();
+		if (ops && ops->save_node)
+			ops->save_node(purplebuddylist, cnode);
 	}
 
 	if (node != NULL) {
@@ -1502,7 +1001,8 @@ void purple_blist_add_chat(PurpleChat *c
 		}
 	}
 
-	purple_blist_schedule_save();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) cnode);
 
 	if (ops && ops->update)
 		ops->update(purplebuddylist, (PurpleBlistNode *)cnode);
@@ -1580,8 +1080,6 @@ void purple_blist_add_buddy(PurpleBuddy 
 		if (ops && ops->remove)
 			ops->remove(purplebuddylist, bnode);
 
-		purple_blist_schedule_save();
-
 		if (bnode->parent->parent != (PurpleBlistNode*)g) {
 			hb = g_new(struct _purple_hbuddy, 1);
 			hb->name = g_strdup(purple_normalize(buddy->account, buddy->name));
@@ -1649,7 +1147,8 @@ void purple_blist_add_buddy(PurpleBuddy 
 
 	purple_contact_invalidate_priority_buddy(purple_buddy_get_contact(buddy));
 
-	purple_blist_schedule_save();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) buddy);
 
 	if (ops && ops->update)
 		ops->update(purplebuddylist, (PurpleBlistNode*)buddy);
@@ -1868,7 +1367,8 @@ void purple_blist_add_contact(PurpleCont
 		if (ops && ops->remove)
 			ops->remove(purplebuddylist, cnode);
 
-		purple_blist_schedule_save();
+		if (ops && ops->remove_node)
+			ops->remove_node(purplebuddylist, (PurpleBlistNode*) cnode);
 	}
 
 	if (node && (PURPLE_BLIST_NODE_IS_CONTACT(node) ||
@@ -1894,7 +1394,13 @@ void purple_blist_add_contact(PurpleCont
 		g->currentsize++;
 	g->totalsize++;
 
-	purple_blist_schedule_save();
+	if (ops && ops->save_node)
+	{
+		if (cnode->child)
+			ops->save_node(purplebuddylist, (PurpleBlistNode*) cnode);
+		for (bnode = cnode->child; bnode; bnode = bnode->next)
+			ops->save_node(purplebuddylist, (PurpleBlistNode*) bnode);
+	}
 
 	if (ops && ops->update)
 	{
@@ -1989,7 +1495,11 @@ void purple_blist_add_group(PurpleGroup 
 		purplebuddylist->root = gnode;
 	}
 
-	purple_blist_schedule_save();
+	if (ops && ops->save_node) {
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) gnode);
+		for (node = gnode->child; node; node = node->next)
+			ops->save_node(purplebuddylist, node);
+	}
 
 	if (ops && ops->update) {
 		ops->update(purplebuddylist, gnode);
@@ -2035,12 +1545,13 @@ void purple_blist_remove_contact(PurpleC
 		if (node->next)
 			node->next->prev = node->prev;
 
-		purple_blist_schedule_save();
-
 		/* Update the UI */
 		if (ops && ops->remove)
 			ops->remove(purplebuddylist, node);
 
+		if (ops && ops->remove_node)
+			ops->remove_node(purplebuddylist, (PurpleBlistNode*) node);
+
 		purple_signal_emit(purple_blist_get_handle(), "blist-node-removed",
 				PURPLE_BLIST_NODE(contact));
 
@@ -2096,8 +1607,6 @@ void purple_blist_remove_buddy(PurpleBud
 		}
 	}
 
-	purple_blist_schedule_save();
-
 	/* Remove this buddy from the buddies hash table */
 	hb.name = g_strdup(purple_normalize(buddy->account, buddy->name));
 	hb.account = buddy->account;
@@ -2113,6 +1622,9 @@ void purple_blist_remove_buddy(PurpleBud
 	if (ops && ops->remove)
 		ops->remove(purplebuddylist, node);
 
+	if (ops && ops->remove_node)
+		ops->remove_node(purplebuddylist, (PurpleBlistNode*) node);
+
 	/* Signal that the buddy has been removed before freeing the memory for it */
 	purple_signal_emit(purple_blist_get_handle(), "buddy-removed", buddy);
 
@@ -2155,13 +1667,15 @@ void purple_blist_remove_chat(PurpleChat
 		}
 		group->totalsize--;
 
-		purple_blist_schedule_save();
 	}
 
 	/* Update the UI */
 	if (ops && ops->remove)
 		ops->remove(purplebuddylist, node);
 
+	if (ops && ops->remove_node)
+		ops->remove_node(purplebuddylist, (PurpleBlistNode*) node);
+
 	purple_signal_emit(purple_blist_get_handle(), "blist-node-removed",
 			PURPLE_BLIST_NODE(chat));
 
@@ -2191,12 +1705,13 @@ void purple_blist_remove_group(PurpleGro
 	if (node->next)
 		node->next->prev = node->prev;
 
-	purple_blist_schedule_save();
-
 	/* Update the UI */
 	if (ops && ops->remove)
 		ops->remove(purplebuddylist, node);
 
+	if (ops && ops->remove_node)
+		ops->remove_node(purplebuddylist, (PurpleBlistNode*) node);
+
 	purple_signal_emit(purple_blist_get_handle(), "blist-node-removed",
 			PURPLE_BLIST_NODE(group));
 
@@ -2808,13 +2323,16 @@ void purple_blist_node_remove_setting(Pu
 
 void purple_blist_node_remove_setting(PurpleBlistNode *node, const char *key)
 {
+	PurpleBlistUiOps *ops;
 	g_return_if_fail(node != NULL);
 	g_return_if_fail(node->settings != NULL);
 	g_return_if_fail(key != NULL);
 
 	g_hash_table_remove(node->settings, key);
 
-	purple_blist_schedule_save();
+	ops = purple_blist_get_ui_ops();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, (PurpleBlistNode*) node);
 }
 
 void
@@ -2844,6 +2362,7 @@ purple_blist_node_set_bool(PurpleBlistNo
 purple_blist_node_set_bool(PurpleBlistNode* node, const char *key, gboolean data)
 {
 	PurpleValue *value;
+	PurpleBlistUiOps *ops;
 
 	g_return_if_fail(node != NULL);
 	g_return_if_fail(node->settings != NULL);
@@ -2854,7 +2373,9 @@ purple_blist_node_set_bool(PurpleBlistNo
 
 	g_hash_table_replace(node->settings, g_strdup(key), value);
 
-	purple_blist_schedule_save();
+	ops = purple_blist_get_ui_ops();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, node);
 }
 
 gboolean
@@ -2880,6 +2401,7 @@ purple_blist_node_set_int(PurpleBlistNod
 purple_blist_node_set_int(PurpleBlistNode* node, const char *key, int data)
 {
 	PurpleValue *value;
+	PurpleBlistUiOps *ops;
 
 	g_return_if_fail(node != NULL);
 	g_return_if_fail(node->settings != NULL);
@@ -2890,7 +2412,9 @@ purple_blist_node_set_int(PurpleBlistNod
 
 	g_hash_table_replace(node->settings, g_strdup(key), value);
 
-	purple_blist_schedule_save();
+	ops = purple_blist_get_ui_ops();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, node);
 }
 
 int
@@ -2916,6 +2440,7 @@ purple_blist_node_set_string(PurpleBlist
 purple_blist_node_set_string(PurpleBlistNode* node, const char *key, const char *data)
 {
 	PurpleValue *value;
+	PurpleBlistUiOps *ops;
 
 	g_return_if_fail(node != NULL);
 	g_return_if_fail(node->settings != NULL);
@@ -2926,7 +2451,9 @@ purple_blist_node_set_string(PurpleBlist
 
 	g_hash_table_replace(node->settings, g_strdup(key), value);
 
-	purple_blist_schedule_save();
+	ops = purple_blist_get_ui_ops();
+	if (ops && ops->save_node)
+		ops->save_node(purplebuddylist, node);
 }
 
 const char *
@@ -2981,6 +2508,10 @@ purple_blist_set_ui_ops(PurpleBlistUiOps
 purple_blist_set_ui_ops(PurpleBlistUiOps *ops)
 {
 	blist_ui_ops = ops;
+	if (!ops->save_node)
+		ops->save_node = purple_blist_save_callback;
+	if (!ops->remove_node)
+		ops->remove_node = purple_blist_save_callback;
 }
 
 PurpleBlistUiOps *
@@ -3100,13 +2631,13 @@ purple_blist_uninit(void)
 	/* This happens if we quit before purple_set_blist is called. */
 	if (purplebuddylist == NULL)
 		return;
+// UI should save blist before quit
+// 	if (save_timer != 0) {
+// 		purple_timeout_remove(save_timer);
+// 		save_timer = 0;
+// 		purple_blist_sync();
+// 	}
 
-	if (save_timer != 0) {
-		purple_timeout_remove(save_timer);
-		save_timer = 0;
-		purple_blist_sync();
-	}
-
 	node = purple_blist_get_root();
 	while (node) {
 		next_node = node->next;
============================================================
--- libpurple/blist.h	9580da3d4ae9096b2e4b8cbb88ca57a84f03f901
+++ libpurple/blist.h	963a9275946f159d188373d2444787bd7f7e00ed
@@ -216,8 +216,12 @@ struct _PurpleBlistUiOps
 							 const char *alias, const char *name);
 	void (*request_add_group)(void);
 
-	void (*_purple_reserved1)(void);
-	void (*_purple_reserved2)(void);
+	void (*save_node)(PurpleBuddyList *blist,
+				PurpleBlistNode *node);
+
+	void (*remove_node)(PurpleBuddyList *blist,
+				PurpleBlistNode *node);
+
 	void (*_purple_reserved3)(void);
 	void (*_purple_reserved4)(void);
 };
@@ -239,6 +243,20 @@ PurpleBuddyList *purple_blist_new(void);
 PurpleBuddyList *purple_blist_new(void);
 
 /**
+ * Loads the buddy list from ~/.purple/blist.xml.
+ */
+void purple_blist_load(void);
+
+/**
+ * Schedule a save of the blist.xml file.  This is used by the privacy
+ * API whenever the privacy settings are changed.  If you make a change
+ * to blist.xml using one of the functions in the buddy list API, then
+ * the buddy list is saved automatically, so you should not need to
+ * call this.
+ */
+void purple_blist_schedule_save(void);
+
+/**
  * Sets the main buddy list.
  *
  * @param blist The buddy list you want to use.
@@ -1002,20 +1020,6 @@ int purple_blist_get_group_online_count(
 /****************************************************************************************/
 
 /**
- * Loads the buddy list from ~/.purple/blist.xml.
- */
-void purple_blist_load(void);
-
-/**
- * Schedule a save of the blist.xml file.  This is used by the privacy
- * API whenever the privacy settings are changed.  If you make a change
- * to blist.xml using one of the functions in the buddy list API, then
- * the buddy list is saved automatically, so you should not need to
- * call this.
- */
-void purple_blist_schedule_save(void);
-
-/**
  * Requests from the user information needed to add a buddy to the
  * buddy list.
  *
============================================================
--- libpurple/privacy.c	5e9715a02d5433f53c7de47f703619bc84be82f5
+++ libpurple/privacy.c	8afe566bde4b11a9b5426cf92aff781627c5e59c
@@ -35,6 +35,7 @@ purple_privacy_permit_add(PurpleAccount 
 	GSList *l;
 	char *name;
 	PurpleBuddy *buddy;
+	PurpleAccountUiOps *ui_ops;
 
 	g_return_val_if_fail(account != NULL, FALSE);
 	g_return_val_if_fail(who     != NULL, FALSE);
@@ -62,7 +63,9 @@ purple_privacy_permit_add(PurpleAccount 
 	if (privacy_ops != NULL && privacy_ops->permit_added != NULL)
 		privacy_ops->permit_added(account, who);
 
-	purple_blist_schedule_save();
+	ui_ops = purple_accounts_get_ui_ops();
+	if (ui_ops != NULL && ui_ops->save_account != NULL)
+		ui_ops->save_account(account);
 
 	/* This lets the UI know a buddy has had its privacy setting changed */
 	buddy = purple_find_buddy(account, name);
@@ -81,6 +84,7 @@ purple_privacy_permit_remove(PurpleAccou
 	const char *name;
 	PurpleBuddy *buddy;
 	char *del;
+	PurpleAccountUiOps *ui_ops;
 
 	g_return_val_if_fail(account != NULL, FALSE);
 	g_return_val_if_fail(who     != NULL, FALSE);
@@ -109,7 +113,9 @@ purple_privacy_permit_remove(PurpleAccou
 	if (privacy_ops != NULL && privacy_ops->permit_removed != NULL)
 		privacy_ops->permit_removed(account, who);
 
-	purple_blist_schedule_save();
+	ui_ops = purple_accounts_get_ui_ops();
+	if (ui_ops != NULL && ui_ops->save_account != NULL)
+		ui_ops->save_account(account);
 
 	buddy = purple_find_buddy(account, name);
 	if (buddy != NULL) {
@@ -127,6 +133,7 @@ purple_privacy_deny_add(PurpleAccount *a
 	GSList *l;
 	char *name;
 	PurpleBuddy *buddy;
+	PurpleAccountUiOps *ui_ops;
 
 	g_return_val_if_fail(account != NULL, FALSE);
 	g_return_val_if_fail(who     != NULL, FALSE);
@@ -154,7 +161,9 @@ purple_privacy_deny_add(PurpleAccount *a
 	if (privacy_ops != NULL && privacy_ops->deny_added != NULL)
 		privacy_ops->deny_added(account, who);
 
-	purple_blist_schedule_save();
+	ui_ops = purple_accounts_get_ui_ops();
+	if (ui_ops != NULL && ui_ops->save_account != NULL)
+		ui_ops->save_account(account);
 
 	buddy = purple_find_buddy(account, name);
 	if (buddy != NULL) {
@@ -172,6 +181,7 @@ purple_privacy_deny_remove(PurpleAccount
 	const char *normalized;
 	char *name;
 	PurpleBuddy *buddy;
+	PurpleAccountUiOps *ui_ops;
 
 	g_return_val_if_fail(account != NULL, FALSE);
 	g_return_val_if_fail(who     != NULL, FALSE);
@@ -205,8 +215,11 @@ purple_privacy_deny_remove(PurpleAccount
 	}
 
 	g_free(name);
-	purple_blist_schedule_save();
 
+	ui_ops = purple_accounts_get_ui_ops();
+	if (ui_ops != NULL && ui_ops->save_account != NULL)
+		ui_ops->save_account(account);
+
 	return TRUE;
 }
 
